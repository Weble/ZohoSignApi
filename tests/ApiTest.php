<?php

namespace Webleit\ZohoSignApi\Test;

use PHPUnit\Framework\TestCase;
use Webleit\ZohoSignApi\Client;
use Webleit\ZohoSignApi\Models\Request;
use Webleit\ZohoSignApi\Models\Template;
use Webleit\ZohoSignApi\ZohoSign;

/**
 * Class ClassNameGeneratorTest
 * @package Webleit\ZohoBooksApi\Test
 */
class ExampleTest extends TestCase
{
    /**
     * @var Client
     */
    protected $client;

    /**
     * @var ZohoSign
     */
    protected $zoho;

    /**
     * setup
     */
    protected function setUp ()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $client = new ZohoSign('', '');
        $client->setRefreshToken('');

        $this->client = $client->getClient();
        $this->zoho = $client;
    }

    /**
     *
     */
    public function hasAccessToken()
    {
        $accessToken = $this->client->getAccessToken();
        $this->assertTrue(strlen($accessToken) > 0);
    }

    /**
     *
     */
    public function canGetListOfTemplates()
    {
        $this->assertGreaterThan(0, $this->zoho->templates->getList()->count());
    }

    /**
     *
     */
    public function canGetTemplate()
    {
        /** @var Template $template */
        $template = $this->zoho->templates->getList()->first();
        $templateResource = $this->zoho->templates->get($template->getId());
        $this->assertEquals($template->getId(), $templateResource->getId());
    }

    /**
     *
     */
    public function canSendTemplateForSigning()
    {
        /** @var Template $template */
        $template = $this->zoho->templates->getList()->first();
        $request = $template
            ->sendForSigning()
            ->toEmail('daniele.rosario@weble.it')
            ->toName('Daniele Rosario')
            ->send();

        $this->assertEquals(Request::class, get_class($request));
    }
}